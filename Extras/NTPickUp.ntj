// Written By nullard and revised by Diabolic

Include('libs/common/NTCommon.ntl');
Include('NTBot/char_configs/NTConfig.ntl');
NTC_IncludeLibs();
var _endTime = null;
var justGrabIt = false;
var mulepos = NT_File("AMS/MuleStatus/" + me.account + "_locstatus.txt", 0);
var muleAccount = NT_File("AMS/MuleStatus/" + me.account + "_muleaccount.txt", 0);
var databasesupport = true;

function NTMain()
{
	_endTime = GetTickCount() + 1000 * 60 * 3 + 1000 * 15;
	
	Say("mule position is " + mulepos);
	
	if(justGrabIt) 
		_endTime = GetTickCount() + 1000 * 60 * 1;
		
	Delay(1000);
	var _counter = 0;
	while (_counter < 10) {
		Delay(500);
		_counter++;
	}
	NTConfig_NIPFilePath = ['PickupEverything.nip']; 
	NTConfig_Columns[0] = [1,1,1,1,1,1,1,1,1,1];
	NTConfig_Columns[1] = [1,1,1,1,1,1,1,1,1,1];
	NTConfig_Columns[2] = [1,1,1,1,1,1,1,1,1,1];
	NTConfig_Columns[3] = [1,1,1,1,1,1,1,1,1,1];
	NTSI_LoadNIPFiles('NTBot/item_configs');

	NTConfig_SnagRange = 30;
	NTConfig_FreeSpace = 2;
	NTTM_CheckAct(1);
	
	SetUIState(0x01,true);
		var _items = me.GetItems();
			for(var i = 0 ; i < _items.length ; i++) {
				if(_items[i].mode == 0 && (_items[i].classid == 529 || _items[i].classid == 530)) {
			NTT_DropItem(_items[i]);
		}
	}
	SetUIState(0x01,false);
	
	for (var _ctr=0;_ctr<5; _ctr++) {
		if (!_ItemsOnGround()) {
			NTMU_TLMuleInventory();
			while (GetTickCount() < _endTime) {
				SetStatusText('Finished muling. Time until NG (' +
						parseInt((_endTime - GetTickCount())/1000) + 's)');
				Delay(1000);
			}
			NT_File("AMS/MuleStatus/" + me.account + "_charstatus.txt", 1, "Main");
				NTC_Delay(500);
					NT_File("AMS/MuleStatus/" + me.account + "_mulingstatus.txt", 1, "false");
				NTC_Delay(500);
			NT_File("AMS/MuleStatus/" + me.account + "_mulegame.txt", 1);
			CloseD2();
		}
		NTTM_TownMove('stash');
		_stash = NTC_FindUnit(NTC_UNIT_OBJECT, NTC_UNIT_STASH);
		if (!NTT_DoInteract(_stash)) NTT_DoInteract(_stash);
		if (!NTT_ManageStash()) NTT_ManageStash();
		Delay(1500);
		me.Cancel(1);
		if (!_GrabItems() && _ItemsOnGround() && !_GrabItems()) { 
			NTMU_TLMuleInventory();
			while (GetTickCount() < _endTime) {
				SetStatusText('Waiting before next mule(' +
						parseInt((_endTime - GetTickCount())/1000) + 's)');
				Delay(1000);
			}
			if(!_GrabItems()) {
			nextMulePos(mulepos);
			NTC_Delay(500);
			ExitGame();
			}
		}
	}
	NTMU_TLInventory();
	while (GetTickCount() < _endTime) {
		SetStatusText('Finished muling. Time until NG (' +
				parseInt((_endTime - GetTickCount())/1000) + 's)');
		Delay(1000);
	}
	NT_File("AMS/MuleStatus/" + me.account + "_charstatus.txt", 1, "Main");
		NTC_Delay(500);
			NT_File("AMS/MuleStatus/" + me.account + "_mulingstatus.txt", 1, "false");
		NTC_Delay(500);
	NT_File("AMS/MuleStatus/" + me.account + "_mulegame.txt", 1);	
	ExitGame();
}

function _GrabItems()
{
	var _item = NTC_FindUnit(NTC_UNIT_ITEM);
	var _itemsChecked = [];
	if(!_item) return false;
	var _pickedOne = false;
	do {
		if(_item.mode == 3 || _item.mode == 5) {
			if(NTSI_IsIgnoredItemInt(_item.classid) || _item.classid == 529 || _item.classid == 530)
				continue;

			if (NTSI_CheckItem(_item, false)[0]) {
				_itemsChecked.push(new NTSI_ItemInt(_item, true));
			}
		}
	} while(_item.GetNext());
	var _checkedItem = null;
	while (_itemsChecked.length) {
		_checkedItem = _itemsChecked.pop();
		_item = NTC_FindUnit(NTC_UNIT_ITEM, _checkedItem.GID);
		if (NTT_CheckSpace(_item.xsize, _item.ysize)) {
			if (NTSI_PickUpItemInt(_item)) _pickedOne = true;
		}
		else if (!NTT_CheckSpace(1, 1)) return _pickedOne;
	}
	return _pickedOne;
}

var _ItemsOnGround = function() {
	var _item = NTC_FindUnit(NTC_UNIT_ITEM);
	if (!_item) return false;
	do {
		if(_item.mode == 3 || _item.mode == 5) {
			if(NTSI_IsIgnoredItemInt(_item.classid) || _item.classid == 529 || _item.classid == 530)
				continue;
				}
			return true;
	} while(_item.GetNext());
	return false;
};


function NTMU_TLMuleInventory() {
	NTConfig_TLInventory_SkipEquipped   = true;         // true = just log stash and inventory
	NTConfig_TLInventory_Delimeter      = "-";            // output file delimiter - see function TTL_WriteIt()
	NTConfig_TLInventory_SortOrder      = "QUALITY|TYPE|CLASS|NAME";
	
	Print(COLOR_3 + "[Toothless Inventory] - Load");
   
	if(databasesupport && _ItemsOnGround())
		Log_DoIt(true);
	else
		TLI_MuledIt();
	
	Print ("Finished");
}

function TLI_MuledIt(verbose) {
	Print ("Attempting to log inventory ...");
   
   	if(arguments.length < 1)
		var verbose = false;
		
	var items = me.GetItems();
	items.sort(function(a, b){
		var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
		if (nameA < nameB) //sort string ascending
			return -1
		if (nameA > nameB)
			return 1
		return 0 //default return value (no sorting)
	});
	var logged = new Array();
	if (items) {
		for(var i = 0 ; i < items.length ; i++) {
			item = items[i];
			ignore = _NTT_IgnoredItems.join("-");
			ignore += "-box";
         
			if(ignore.indexOf(item.code) == -1) {
				if(!NTConfig_TLInventory_SkipEquipped)
					logged.push(item);
				else if (item.mode == 0)
					logged.push(item);
			}
		}
		if (logged.length) {
			var fileName = "AMS/MuleLogs/" + muleAccount + "_" + me.name + ".txt";
			_file = FileOpen(fileName, 1);
			if (_file) {
				for (var i = 0; i < logged.length; i++)
					TLI_LogItem(_file, logged[i], verbose);
				_file.Close();
				Print (COLOR_2 + logged.length + " items written to - " + fileName + " -");
			}
			else
				Print(COLOR_1 + "Unable to write file to - " + fileName);
		}
		else
			Print(COLOR_1 + "No items on this character to log");
	}
	else
		Print(COLOR_1 + "No items on this character to log");
}

function nextMulePos(pos)
{
	switch(pos)
		{
		case "0":
			{
			NT_File("AMS/MuleStatus/" + me.account + "_charstatus.txt", 1, "New");
			NTC_Delay(500);
			NT_File("AMS/MuleStatus/" + me.account + "_locstatus.txt", 1, "1");
			NTC_Delay(500);
			break;
			}
		case "1":
			{
			NT_File("AMS/MuleStatus/" + me.account + "_charstatus.txt", 1, "New");
			NTC_Delay(500);
			NT_File("AMS/MuleStatus/" + me.account + "_locstatus.txt", 1, "2");
			NTC_Delay(500);
			break;
			}
		case "2":
			{
			NT_File("AMS/MuleStatus/" + me.account + "_charstatus.txt", 1, "New");
			NTC_Delay(500);
			NT_File("AMS/MuleStatus/" + me.account + "_locstatus.txt", 1, "3");
			NTC_Delay(500);
			break;
			}
		case "3":
			{
			NT_File("AMS/MuleStatus/" + me.account + "_charstatus.txt", 1, "New");
			NTC_Delay(500);
			NT_File("AMS/MuleStatus/" + me.account + "_locstatus.txt", 1, "4");
			NTC_Delay(500);
			break;
			}
		case "4":
			{
			NT_File("AMS/MuleStatus/" + me.account + "_charstatus.txt", 1, "New");
			NTC_Delay(500);
			NT_File("AMS/MuleStatus/" + me.account + "_locstatus.txt", 1, "5");
			NTC_Delay(500);
			break;
			}
		case "5":
			{
			NT_File("AMS/MuleStatus/" + me.account + "_charstatus.txt", 1, "New");
			NTC_Delay(500);
			NT_File("AMS/MuleStatus/" + me.account + "_locstatus.txt", 1, "6");
			NTC_Delay(500);
			break;
			}
		case "6":
			{
			NT_File("AMS/MuleStatus/" + me.account + "_charstatus.txt", 1, "New");
			NTC_Delay(500);
			NT_File("AMS/MuleStatus/" + me.account + "_locstatus.txt", 1, "7");
			NTC_Delay(500);
			break;
			}
		case "7":
			{
			NT_File("AMS/MuleStatus/" + me.account + "_charstatus.txt", 1, "Account");
			NTC_Delay(500);
			break;
			}
		default:
			{
			while(1) {
				Say("!Where is the mule!");
				NTC_Delay(5000);
				}
			break;
			}
		}
}

function tryItemsAgain()
{
	var _item = NTC_FindUnit(NTC_UNIT_ITEM);
	for(var i = 0; i < _item.length; i++) {
		if(_item.mode == 3 || _item.mode == 5) {
			if(!NTSI_IsIgnoredItemInt(_item.classid) && _item.classid != 529 && _item.classid != 530) {
				NTSI_PickUpItemInt(_item);
			}
		}
	}
	return;
}

function Log_DoIt(verbose) {
	Print ("Attempting to log inventory ...");
   
   	if(arguments.length < 1)
		var verbose = false;
	
	var items = me.GetItems();
	items.sort(function(a, b){
		var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
		if (nameA < nameB) //sort string ascending
			return -1
		if (nameA > nameB)
			return 1
		return 0 //default return value (no sorting)
	});
	var logged = new Array();
	if (items) {
		for(var i = 0 ; i < items.length ; i++) {
			item = items[i];
			ignore = _NTT_IgnoredItems.join("-");
			ignore += "-box";
         
			if(ignore.indexOf(item.code) == -1) {
				if(!NTConfig_TLInventory_SkipEquipped)
					logged.push(item);
				else if (item.mode == 0)
					logged.push(item);
			}
		}
		if (logged.length) {
			var fileName = "AMS/MuleInventory/" + me.account + "_" + me.name + ".txt";
			_file = FileOpen(fileName, 1);
			if (_file) {
			_file.WriteLine(me.account);
			_file.WriteLine(MuleAccount);
			_file.WriteLine(me.name);
			_file.WriteLine("");
				for (var i = 0; i < logged.length; i++)
					ItemDecipher(_file, logged[i], verbose);
				_file.Close();
				Print (COLOR_2 + logged.length + " items written to - " + fileName + " -");
			}
			else
				Print(COLOR_1 + "Unable to write file to - " + fileName);
		}
		else
			Print(COLOR_1 + "No items on this character to log");
	}
	else
		Print(COLOR_1 + "No items on this character to log");
}

function ItemDecipher(file, item, verbose)
{
	var name = item.name;
	var UNIDtext = "";
	
	name = name.replace(/\n/g, " ");
	file.WriteLine(name);
	if(item.itemtype >= 91 && item.itemtype <= 102)
		file.WriteLine("Item Base Gem");
	else
		file.WriteLine("Item Base " + GetItemBase(item.itemtype));	
	file.WriteLine("Item Quality " + GetQuality(item.quality));
	file.WriteLine("Item Image " + item.classid);
	if((item.itemflag&0x4000000) > 0)
		file.WriteLine("True");
	else
		file.WriteLine("False");
		
	if (!(item.itemflag & 0x10)) {
		for (var qual in _NTIPAliasQuality) {
			if (_NTIPAliasQuality[qual]==item.quality) UNIDtext+=qual.charAt(0).toUpperCase() + qual.substr(1) + "/";
		}
		var s = item.itemdesc;
		s = s.replace(REGEX6, REPLACE6); 
		var def = s.match(/.*(Defense: \d+).*/);
		if (def!=null) {
			def[0] = def[0].replace(/Defense:/,"Def");
			UNIDtext += def[0]+"/";
		}
		UNIDtext += "Unidentified";
		if (item.itemflag & 0x400000) UNIDtext+="/Ethereal";
		 file.WriteLine(UNIDtext);
		
		
	// 74 is rune, 91 - 102 is gem  
	} else if (item.itemtype!=74 && !(item.itemtype >= 91 && item.itemtype <= 102)) {
		file.WriteLine(TLI_ItemDesc(item.itemdesc, item.name, verbose));
	}
	file.WriteLine("");


}

function GetQuality(id)
{
	
	switch(id)
	{
	case 1: return "LowQuality";
	case 2:	return "Normal";
	case 3: return "Superior";
	case 4: return "Magic";
	case 5: return "Set";
	case 6: return "Rare";
	case 7: return "Unique";
	case 8: return "Crafted";
	}

	return "Unknown";
}

function GetItemBase(id)
{

	switch(id)
	{

	case 2:	return "Shield";
	case 3:	return "Armor";
	case 4:	return "Gold";
	case 5:	return "Bow Quiver";
	case 6:	return "Crossbow Quiver";
	case 7:	return "PlayerBodyPart";
	case 8:	return "Herb";
	case 9:	return "Potion";
	case 10:	return "Ring";
	case 11:	return "Elixir";
	case 12:	return "Amulet";
	case 13:	return "Charm";
	case 14:	return "Not Used";
	case 15:	return "Boots";
	case 16:	return "Gloves";
	case 17:	return "Not Used";
	case 18:	return "Book";
	case 19:	return "Belt";
	case 20:	return "Gem";
	case 21:	return "Torch";
	case 22:	return "Scroll";
	case 23:	return "Not Used";
	case 24:	return "Scepter";
	case 25:	return "Wand";
	case 26:	return "Staff";
	case 27:	return "Bow";
	case 28:	return "Axe";
	case 29:	return "Club";
	case 30:	return "Sword";
	case 31:	return "Hammer";
	case 32:	return "Knife";
	case 33:	return "Spear";
	case 34:	return "polearm";
	case 35:	return "Crossbow";
	case 36:	return "Mace";
	case 37:	return "Helm";
	case 38:	return "Missile Potion";
	case 39:	return "Quest";
	case 40:	return "Body Part";
	case 41:	return "Key";
	case 42:	return "Throwing Knife";
	case 43:	return "Throwing Axe";
	case 44:	return "Javelin";
	case 45:	return "Weapon";
	case 46:	return "Melee Weapon";
	case 47:	return "Missile Weapon";
	case 48:	return "Thrown Weapon";
	case 49:	return "combo Weapon";
	case 50:	return "Any Armor";
	case 51:	return "Any Shield";
	case 52:	return "Miscellaneous";
	case 53:	return "Socket Filler";
	case 54:	return "Second Hand";
	case 55:	return "StavesandRods";
	case 56:	return "Missile";
	case 57:	return "Blunt";
	case 58:	return "Jewel";
	case 59:	return "Class Specific";
	case 60:	return "Amazon Item";
	case 61:	return "Barbarian Item";
	case 62:	return "Necromancer Item";
	case 63:	return "Paladin Item";
	case 64:	return "Sorceress Item";
	case 65:	return "Assassin Item";
	case 66:	return "Druid Item";
	case 67:	return "Hand to Hand";
	case 68:	return "Orb";
	case 69:	return "Voodoo Heads";
	case 70:	return "Auric Shield";
	case 71:	return "Primal Helm";
	case 72:	return "Pelt";
	case 73:	return "Cloak";
	case 74:	return "Rune";
	case 75:	return "Circlet";
	case 76:	return "Healing Potion";
	case 77:	return "Mana Potion";
	case 78:	return "Rejuvpotion";
	case 79:	return "Stamina Potion";
	case 80:	return "Antidote Potion";
	case 81:	return "Thawing Potion";
	case 82:	return "Small Charm";
	case 83:	return "Medium Charm";
	case 84:	return "Large Charm";
	case 85:	return "Amazon Bow";
	case 86:	return "Amazon Spear";
	case 87:	return "Amazon Javelin";
	case 88:	return "Assassin Claw";
	case 89:	return "Magic Bow Quiv";
	case 90:	return "Magic Xbow Quiv";
	case 91:	return "Chipped Gem";
	case 92:	return "Flawed Gem";
	case 93:	return "Standard Gem";
	case 94:	return "Flawless Gem";
	case 95:	return "Perfect Gem";
	case 96:	return "Amethyst";
	case 97:	return "Diamond";
	case 98:	return "Emerald";
	case 99:	return "Ruby";
	case 100:	return "Sapphire";
	case 101:	return "Topaz";
	case 102:	return "Skull";
	}
	
	return "Unknown";
}